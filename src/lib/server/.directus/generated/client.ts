/**
 * This file is automatically generated by the `@indirectus/cli` package.
 * Follow the package's instruction to update this file with the latest schema.
 */

import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

type DirectusSDK = typeof DirectusSDK;

/*
declare module "@directus/sdk" {
  type DirectusAccess<Schema = any> = Directus.MergeCoreCollection<
    Schema,
    "directus_access", {
      id: string;
    }
  >;

  type DirectusPolicies<Schema = any> = Directus.MergeCoreCollection<
    Schema,
    "directus_policies", {
      id: string;
    }
  >;
}
*/

export namespace Types {
  // Internal
  export type Nullable<T> = T | null;
  export type Optional<T> = Nullable<T>;
  export type UnknownType<T> = T | unknown;
  export type PrimaryKey<T> = T;

  // Numbers
  export type BigInteger = number;
  export type Decimal = number;
  export type Float = number;
  export type Integer = number;
  export type Number = number;

  // Buffers
  export type Binary = string;
  export type String = string;
  export type Text = string;

  // Date & Time
  export type Date = string | globalThis.Date;
  export type DateTime = string | globalThis.Date;

  // Geometry
  export namespace Geometry {
    export type LineString = any;
    export type MultiLineString = any;
    export type MultiPoint = any;
    export type MultiPolygon = any;
    export type Point = any;
    export type Polygon = any;
  }

  // Complex
  export type JSON = any;
  export type JSONSchema = any;

  // Others
  export type UUID = string;
  export type Boolean = boolean;
  export type Enum = string;
}

/**
 * All collection types.
 */
export namespace Collections {
  /**
   * The resolved directus activity collection type.
   *
   */
  export type DirectusActivity = Directus.DirectusActivity<System>;

  /**
   * The resolved directus collections collection type.
   *
   */
  export type DirectusCollection = Directus.DirectusCollection<System>;

  /**
   * The resolved directus comments collection type.
   *
   */
  export type DirectusComment = Directus.DirectusComment<System>;

  /**
   * The resolved directus fields collection type.
   *
   */
  export type DirectusField = Directus.DirectusField<System>;

  /**
   * The resolved directus files collection type.
   *
   */
  export type DirectusFile = Directus.DirectusFile<System>;

  /**
   * The resolved directus folders collection type.
   *
   */
  export type DirectusFolder = Directus.DirectusFolder<System>;

  /**
   * The resolved directus permissions collection type.
   *
   */
  export type DirectusPermission = Directus.DirectusPermission<System>;

  /**
   * The resolved directus presets collection type.
   *
   */
  export type DirectusPreset = Directus.DirectusPreset<System>;

  /**
   * The resolved directus relations collection type.
   *
   */
  export type DirectusRelation = Directus.DirectusRelation<System>;

  /**
   * The resolved directus revisions collection type.
   *
   */
  export type DirectusRevision = Directus.DirectusRevision<System>;

  /**
   * The resolved directus roles collection type.
   *
   */
  export type DirectusRole = Directus.DirectusRole<System>;

  /**
   * The resolved directus settings collection type.
   *
   */
  export type DirectusSettings = Directus.DirectusSettings<System>;

  /**
   * The resolved directus users collection type.
   *
   */
  export type DirectusUser = Directus.DirectusUser<System>;

  /**
   * The resolved directus webhooks collection type.
   *
   */
  export type DirectusWebhook = Directus.DirectusWebhook<System>;

  /**
   * The resolved directus dashboards collection type.
   *
   */
  export type DirectusDashboard = Directus.DirectusDashboard<System>;

  /**
   * The resolved directus panels collection type.
   *
   */
  export type DirectusPanel = Directus.DirectusPanel<System>;

  /**
   * The resolved directus notifications collection type.
   *
   */
  export type DirectusNotification = Directus.DirectusNotification<System>;

  /**
   * The resolved directus shares collection type.
   *
   */
  export type DirectusShare = Directus.DirectusShare<System>;

  /**
   * The resolved directus flows collection type.
   *
   */
  export type DirectusFlow = Directus.DirectusFlow<System>;

  /**
   * The resolved directus operations collection type.
   *
   */
  export type DirectusOperation = Directus.DirectusOperation<System>;

  /**
   * The resolved directus translations collection type.
   *
   */
  export type DirectusTranslation = Directus.DirectusTranslation<System>;

  /**
   * The resolved directus versions collection type.
   *
   */
  export type DirectusVersion = Directus.DirectusVersion<System>;

  /**
   * The resolved directus extensions collection type.
   *
   */
  export type DirectusExtension = Directus.DirectusExtension<System>;

  /**
   * The events collection.
   */
  export interface Events {
    id: Types.PrimaryKey<Types.Integer>;
    start: Types.Optional<Types.DateTime>;
    schedule_prefix: Types.Optional<Types.String>;
    location: Types.String;
    status:
      | "archived"
      | "draft"
      | "register"
      | "dates-visible"
      | "published"
      | Types.String;
    end: Types.Optional<Types.DateTime>;
    about: Types.Optional<Types.String>;
    schedule_accordion: Types.Optional<Types.JSON | Types.JSON>;
    sort: Types.Optional<Types.Integer>;
    cost: Types.Optional<Types.String>;
    schedule_suffix: Types.Optional<Types.String>;
    timezone: Types.String;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    faq: Types.Optional<Types.JSON | Types.JSON>;
    date_updated: Types.Optional<Types.DateTime>;
    event_owners: Collections.EventsDirectusUsers[];
    name: Types.String;
    short_description: Types.String;
    Event_Background: Types.UUID | Collections.DirectusFile;
    Event_Image: Types.UUID | Collections.DirectusFile;
    slug: Types.String;
    color: Types.String;
    register_link: Types.Optional<Types.String>;
  }

  /**
   * The events directus users collection.
   */
  export interface EventsDirectusUsers {
    id: Types.PrimaryKey<Types.Integer>;
    events_id: Types.Optional<Types.Integer | Collections.Events>;
    directus_users_id: Types.Optional<Types.UUID | Collections.DirectusUser>;
  }

  /**
   * The global collection.
   */
  export interface Global {
    id: Types.PrimaryKey<Types.Integer>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    site_mode: "post-season" | "active" | "pre-season" | Types.String;
    extra_links: Types.JSON | Types.JSON;
  }

  /**
   * The projects collection.
   */
  export interface Projects {
    id: Types.PrimaryKey<Types.UUID>;
    status: "published" | "draft" | "archived" | Types.String;
    season: Types.Optional<"2024" | "2023" | Types.String>;
    event: Types.Optional<Types.Integer | Collections.Events>;
    sort: Types.Optional<Types.Integer>;
    user_created: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.UUID | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    featured: Types.Optional<Types.Boolean>;
    image: Types.Optional<Types.UUID | Collections.DirectusFile>;
    title: Types.Optional<Types.String>;
    slug: Types.Optional<Types.String>;
    subtitle: Types.Optional<Types.String>;
    description: Types.Optional<Types.String>;
    tags: Types.Optional<Types.JSON | Types.String[] | Types.JSON>;
    team_members: Types.Optional<Types.JSON | Types.JSON>;
    gallery: Collections.ProjectsFiles[];
  }

  /**
   * The projects files collection.
   */
  export interface ProjectsFiles {
    id: Types.PrimaryKey<Types.Integer>;
    projects_id: Types.Optional<Types.UUID | Collections.Projects>;
    directus_files_id: Types.Optional<Types.UUID | Collections.DirectusFile>;
  }
}

/**
 * System schema extensions.
 */

export interface System {
  /**
   * The definition for the directus activity system collection.
   *
   */
  directus_activity: {}[];

  /**
   * The definition for the directus collections system collection.
   *
   */
  directus_collections: {}[];

  /**
   * The definition for the directus comments system collection.
   *
   */
  directus_comments: {}[];

  /**
   * The definition for the directus fields system collection.
   *
   */
  directus_fields: {}[];

  /**
   * The definition for the directus files system collection.
   *
   */
  directus_files: {}[];

  /**
   * The definition for the directus folders system collection.
   *
   */
  directus_folders: {}[];

  /**
   * The definition for the directus permissions system collection.
   *
   */
  directus_permissions: {}[];

  /**
   * The definition for the directus presets system collection.
   *
   */
  directus_presets: {}[];

  /**
   * The definition for the directus relations system collection.
   *
   */
  directus_relations: {}[];

  /**
   * The definition for the directus revisions system collection.
   *
   */
  directus_revisions: {}[];

  /**
   * The definition for the directus roles system collection.
   *
   */
  directus_roles: {}[];

  /**
   * The definition for the directus settings system collection.
   *
   */
  directus_settings: {};

  /**
   * The definition for the directus users system collection.
   *
   */
  directus_users: {}[];

  /**
   * The definition for the directus webhooks system collection.
   *
   */
  directus_webhooks: {}[];

  /**
   * The definition for the directus dashboards system collection.
   *
   */
  directus_dashboards: {}[];

  /**
   * The definition for the directus panels system collection.
   *
   */
  directus_panels: {}[];

  /**
   * The definition for the directus notifications system collection.
   *
   */
  directus_notifications: {}[];

  /**
   * The definition for the directus shares system collection.
   *
   */
  directus_shares: {}[];

  /**
   * The definition for the directus flows system collection.
   *
   */
  directus_flows: {}[];

  /**
   * The definition for the directus operations system collection.
   *
   */
  directus_operations: {}[];

  /**
   * The definition for the directus translations system collection.
   *
   */
  directus_translations: {}[];

  /**
   * The definition for the directus versions system collection.
   *
   */
  directus_versions: {}[];

  /**
   * The definition for the directus extensions system collection.
   *
   */
  directus_extensions: {}[];
}

/**
 * Schema definition.
 */
export interface Schema extends System {
  /**
   * The events collection.
   */
  events: Collections.Events[];

  /**
   * The events directus users collection.
   */
  events_directus_users: Collections.EventsDirectusUsers[];

  /**
   * The global collection.
   */
  global: Collections.Global;

  /**
   * The projects collection.
   */
  projects: Collections.Projects[];

  /**
   * The projects files collection.
   */
  projects_files: Collections.ProjectsFiles[];
}

export interface TypedCollectionItemsWrapper<Collection extends object> {
  /**
   * Creates many items in the collection.
   */
  create<const Query extends DirectusSDK.Query<Schema, Collection>>(
    items: Partial<Collection>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Read many items from the collection.
   */
  query<const Query extends DirectusSDK.Query<Schema, Collection>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Read the first item from the collection matching the query.
   */
  find<const Query extends DirectusSDK.Query<Schema, Collection>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Update many items in the collection.
   */
  update<const Query extends DirectusSDK.Query<Schema, Collection[]>>(
    keys: string[] | number[],
    patch: Partial<Collection>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>[]
  >;

  /**
   * Remove many items in the collection.
   */
  remove<const Query extends DirectusSDK.Query<Schema, Collection>>(
    keys: string[] | number[],
  ): Promise<void>;
}

export interface TypedCollectionItemWrapper<Collection extends object> {
  /**
   * Create a single item in the collection.
   */
  create<const Query extends DirectusSDK.Query<Schema, Collection>>(
    item: Partial<Collection>,
    query?: Query,
  ): Promise<DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>>;

  /**
   * Read a single item from the collection.
   */
  get<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Update a single item from the collection.
   */
  update<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
    patch: Partial<Collection>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collection, Query["fields"]>
    | undefined
  >;

  /**
   * Remove many items in the collection.
   */
  remove<const Query extends DirectusSDK.Query<Schema, Collection>>(
    key: string | number,
  ): Promise<void>;
}

/**
 * Helper functions
 */

/**
 * Create many events items.
 */
export function createEventsItems<
  const Query extends Directus.Query<Schema, Collections.Events[]>,
>(items: Partial<Collections.Events>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "events", Query>(
    "events",
    items,
    query,
  );
}

/**
 * Create a single events item.
 */
export function createEventsItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Events[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Events>, query?: Query) {
  return DirectusSDK.createItem<Schema, "events", Query>("events", item, query);
}

/**
 * Read many events items.
 */
export function readEventsItems<
  const Query extends Directus.Query<Schema, Collections.Events>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "events", Query>("events", query);
}

/**
 * Read many events items.
 */
export const listEvents = readEventsItems;

/**
 * Gets a single known events item by id.
 */
export function readEventsItem<
  const Query extends Directus.Query<Schema, Collections.Events>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "events", Query>("events", key, query);
}

/**
 * Gets a single known events item by id.
 */
export const readEvents = readEventsItem;

/**
 * Read many events items.
 */
export function updateEventsItems<
  const Query extends Directus.Query<Schema, Collections.Events[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Events>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "events", Query>(
    "events",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known events item by id.
 */
export function updateEventsItem<
  const Query extends Directus.Query<Schema, Collections.Events[]>,
>(key: string | number, patch: Partial<Collections.Events>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "events", Query>(
    "events",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many events items.
 */
export function deleteEventsItems<
  const Query extends Directus.Query<Schema, Collections.Events[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "events", Query>("events", keys);
}

/**
 * Deletes a single known events item by id.
 */
export function deleteEventsItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "events">("events", key);
}

export class EventsItems
  implements TypedCollectionItemsWrapper<Collections.Events>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Events>,
  >(
    items: Partial<Collections.Events>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Events, Query["fields"]>[]
  > {
    return (await this.client.request(
      createEventsItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Events>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Events, Query["fields"]>[]
  > {
    return await this.client.request(readEventsItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Events>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Events, Query["fields"]>
    | undefined
  > {
    const items = await this.client.request(
      readEventsItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Events[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Events>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Events, Query["fields"]>[]
  > {
    return await this.client.request(updateEventsItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Events>>(
    keys: string[] | number[],
  ): Promise<void> {}
}

export class EventsItem
  implements TypedCollectionItemWrapper<Collections.Events>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<const Query extends Directus.Query<Schema, Collections.Events>>(
    item: Partial<Collections.Events>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Events, Query["fields"]>
  > {
    return (await this.client.request(
      createEventsItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Events>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Events, Query["fields"]>
    | undefined
  > {
    return await this.client.request(readEventsItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<const Query extends Directus.Query<Schema, Collections.Events>>(
    key: string | number,
    patch: Partial<Collections.Events>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<Schema, Collections.Events, Query["fields"]>
    | undefined
  > {
    return (await this.client.request(
      updateEventsItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<const Query extends Directus.Query<Schema, Collections.Events>>(
    key: string | number,
  ): Promise<void> {
    return await this.client.request(deleteEventsItem(key));
  }
}

/**
 * Create many events directus users items.
 */
export function createEventsDirectusUsersItems<
  const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers[]>,
>(items: Partial<Collections.EventsDirectusUsers>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "events_directus_users", Query>(
    "events_directus_users",
    items,
    query,
  );
}

/**
 * Create a single events directus users item.
 */
export function createEventsDirectusUsersItem<
  const Query extends DirectusSDK.Query<
    Schema,
    Collections.EventsDirectusUsers[]
  >, // Is this a mistake? Why []?
>(item: Partial<Collections.EventsDirectusUsers>, query?: Query) {
  return DirectusSDK.createItem<Schema, "events_directus_users", Query>(
    "events_directus_users",
    item,
    query,
  );
}

/**
 * Read many events directus users items.
 */
export function readEventsDirectusUsersItems<
  const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "events_directus_users", Query>(
    "events_directus_users",
    query,
  );
}

/**
 * Read many events directus users items.
 */
export const listEventsDirectusUsers = readEventsDirectusUsersItems;

/**
 * Gets a single known events directus users item by id.
 */
export function readEventsDirectusUsersItem<
  const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "events_directus_users", Query>(
    "events_directus_users",
    key,
    query,
  );
}

/**
 * Gets a single known events directus users item by id.
 */
export const readEventsDirectusUsers = readEventsDirectusUsersItem;

/**
 * Read many events directus users items.
 */
export function updateEventsDirectusUsersItems<
  const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.EventsDirectusUsers>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "events_directus_users", Query>(
    "events_directus_users",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known events directus users item by id.
 */
export function updateEventsDirectusUsersItem<
  const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers[]>,
>(
  key: string | number,
  patch: Partial<Collections.EventsDirectusUsers>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "events_directus_users", Query>(
    "events_directus_users",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many events directus users items.
 */
export function deleteEventsDirectusUsersItems<
  const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "events_directus_users", Query>(
    "events_directus_users",
    keys,
  );
}

/**
 * Deletes a single known events directus users item by id.
 */
export function deleteEventsDirectusUsersItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "events_directus_users">(
    "events_directus_users",
    key,
  );
}

export class EventsDirectusUsersItems
  implements TypedCollectionItemsWrapper<Collections.EventsDirectusUsers>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.EventsDirectusUsers
    >,
  >(
    items: Partial<Collections.EventsDirectusUsers>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.EventsDirectusUsers,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createEventsDirectusUsersItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.EventsDirectusUsers,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readEventsDirectusUsersItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.EventsDirectusUsers,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readEventsDirectusUsersItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.EventsDirectusUsers[]
    >,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.EventsDirectusUsers>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.EventsDirectusUsers,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateEventsDirectusUsersItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class EventsDirectusUsersItem
  implements TypedCollectionItemWrapper<Collections.EventsDirectusUsers>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers>,
  >(
    item: Partial<Collections.EventsDirectusUsers>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.EventsDirectusUsers,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createEventsDirectusUsersItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.EventsDirectusUsers,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readEventsDirectusUsersItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers>,
  >(
    key: string | number,
    patch: Partial<Collections.EventsDirectusUsers>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.EventsDirectusUsers,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateEventsDirectusUsersItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.EventsDirectusUsers>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteEventsDirectusUsersItem(key));
  }
}

/**
 * Reads the global singleton.
 */
export function readGlobal<
  const Query extends Directus.Query<Schema, Collections.Global>,
>(query?: Query) {
  return DirectusSDK.readSingleton<Schema, "global", Query>("global", query);
}

/**
 * Reads the global singleton.
 */
export const getGlobal = readGlobal;

/**
 * Create many projects items.
 */
export function createProjectsItems<
  const Query extends Directus.Query<Schema, Collections.Projects[]>,
>(items: Partial<Collections.Projects>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "projects", Query>(
    "projects",
    items,
    query,
  );
}

/**
 * Create a single projects item.
 */
export function createProjectsItem<
  const Query extends DirectusSDK.Query<Schema, Collections.Projects[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.Projects>, query?: Query) {
  return DirectusSDK.createItem<Schema, "projects", Query>(
    "projects",
    item,
    query,
  );
}

/**
 * Read many projects items.
 */
export function readProjectsItems<
  const Query extends Directus.Query<Schema, Collections.Projects>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "projects", Query>("projects", query);
}

/**
 * Read many projects items.
 */
export const listProjects = readProjectsItems;

/**
 * Gets a single known projects item by id.
 */
export function readProjectsItem<
  const Query extends Directus.Query<Schema, Collections.Projects>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "projects", Query>(
    "projects",
    key,
    query,
  );
}

/**
 * Gets a single known projects item by id.
 */
export const readProjects = readProjectsItem;

/**
 * Read many projects items.
 */
export function updateProjectsItems<
  const Query extends Directus.Query<Schema, Collections.Projects[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.Projects>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "projects", Query>(
    "projects",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known projects item by id.
 */
export function updateProjectsItem<
  const Query extends Directus.Query<Schema, Collections.Projects[]>,
>(key: string | number, patch: Partial<Collections.Projects>, query?: Query) {
  return DirectusSDK.updateItem<Schema, "projects", Query>(
    "projects",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many projects items.
 */
export function deleteProjectsItems<
  const Query extends Directus.Query<Schema, Collections.Projects[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "projects", Query>("projects", keys);
}

/**
 * Deletes a single known projects item by id.
 */
export function deleteProjectsItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "projects">("projects", key);
}

export class ProjectsItems
  implements TypedCollectionItemsWrapper<Collections.Projects>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.Projects>,
  >(
    items: Partial<Collections.Projects>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Projects,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createProjectsItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<const Query extends Directus.Query<Schema, Collections.Projects>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Projects,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readProjectsItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<const Query extends Directus.Query<Schema, Collections.Projects>>(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.Projects,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readProjectsItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Projects[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.Projects>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.Projects,
      Query["fields"]
    >[]
  > {
    return await this.client.request(updateProjectsItems(keys, patch, query));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Projects>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class ProjectsItem
  implements TypedCollectionItemWrapper<Collections.Projects>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.Projects>,
  >(
    item: Partial<Collections.Projects>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Projects, Query["fields"]>
  > {
    return (await this.client.request(
      createProjectsItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<const Query extends Directus.Query<Schema, Collections.Projects>>(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.Projects,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readProjectsItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.Projects>,
  >(
    key: string | number,
    patch: Partial<Collections.Projects>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.Projects,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateProjectsItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.Projects>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteProjectsItem(key));
  }
}

/**
 * Create many projects files items.
 */
export function createProjectsFilesItems<
  const Query extends Directus.Query<Schema, Collections.ProjectsFiles[]>,
>(items: Partial<Collections.ProjectsFiles>[], query?: Query) {
  return DirectusSDK.createItems<Schema, "projects_files", Query>(
    "projects_files",
    items,
    query,
  );
}

/**
 * Create a single projects files item.
 */
export function createProjectsFilesItem<
  const Query extends DirectusSDK.Query<Schema, Collections.ProjectsFiles[]>, // Is this a mistake? Why []?
>(item: Partial<Collections.ProjectsFiles>, query?: Query) {
  return DirectusSDK.createItem<Schema, "projects_files", Query>(
    "projects_files",
    item,
    query,
  );
}

/**
 * Read many projects files items.
 */
export function readProjectsFilesItems<
  const Query extends Directus.Query<Schema, Collections.ProjectsFiles>,
>(query?: Query) {
  return DirectusSDK.readItems<Schema, "projects_files", Query>(
    "projects_files",
    query,
  );
}

/**
 * Read many projects files items.
 */
export const listProjectsFiles = readProjectsFilesItems;

/**
 * Gets a single known projects files item by id.
 */
export function readProjectsFilesItem<
  const Query extends Directus.Query<Schema, Collections.ProjectsFiles>,
>(key: string | number, query?: Query) {
  return DirectusSDK.readItem<Schema, "projects_files", Query>(
    "projects_files",
    key,
    query,
  );
}

/**
 * Gets a single known projects files item by id.
 */
export const readProjectsFiles = readProjectsFilesItem;

/**
 * Read many projects files items.
 */
export function updateProjectsFilesItems<
  const Query extends Directus.Query<Schema, Collections.ProjectsFiles[]>,
>(
  keys: string[] | number[],
  patch: Partial<Collections.ProjectsFiles>,
  query?: Query,
) {
  return DirectusSDK.updateItems<Schema, "projects_files", Query>(
    "projects_files",
    keys,
    patch,
    query,
  );
}

/**
 * Gets a single known projects files item by id.
 */
export function updateProjectsFilesItem<
  const Query extends Directus.Query<Schema, Collections.ProjectsFiles[]>,
>(
  key: string | number,
  patch: Partial<Collections.ProjectsFiles>,
  query?: Query,
) {
  return DirectusSDK.updateItem<Schema, "projects_files", Query>(
    "projects_files",
    key,
    patch,
    query,
  );
}

/**
 * Deletes many projects files items.
 */
export function deleteProjectsFilesItems<
  const Query extends Directus.Query<Schema, Collections.ProjectsFiles[]>,
>(keys: string[] | number[]) {
  return DirectusSDK.deleteItems<Schema, "projects_files", Query>(
    "projects_files",
    keys,
  );
}

/**
 * Deletes a single known projects files item by id.
 */
export function deleteProjectsFilesItem(key: string | number) {
  return DirectusSDK.deleteItem<Schema, "projects_files">(
    "projects_files",
    key,
  );
}

export class ProjectsFilesItems
  implements TypedCollectionItemsWrapper<Collections.ProjectsFiles>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<Schema, Collections.ProjectsFiles>,
  >(
    items: Partial<Collections.ProjectsFiles>[],
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ProjectsFiles,
      Query["fields"]
    >[]
  > {
    return (await this.client.request(
      createProjectsFilesItems(items, query as any),
    )) as any; // Seems like a bug in the SDK.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<Schema, Collections.ProjectsFiles>,
  >(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ProjectsFiles,
      Query["fields"]
    >[]
  > {
    return await this.client.request(readProjectsFilesItems(query));
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<Schema, Collections.ProjectsFiles>,
  >(
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ProjectsFiles,
        Query["fields"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readProjectsFilesItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // TODO: fix
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.ProjectsFiles[]>,
  >(
    keys: string[] | number[],
    patch: Partial<Collections.ProjectsFiles>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ProjectsFiles,
      Query["fields"]
    >[]
  > {
    return await this.client.request(
      updateProjectsFilesItems(keys, patch, query),
    );
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.ProjectsFiles>,
  >(keys: string[] | number[]): Promise<void> {}
}

export class ProjectsFilesItem
  implements TypedCollectionItemWrapper<Collections.ProjectsFiles>
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.ProjectsFiles>,
  >(
    item: Partial<Collections.ProjectsFiles>,
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<
      Schema,
      Collections.ProjectsFiles,
      Query["fields"]
    >
  > {
    return (await this.client.request(
      createProjectsFilesItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<Schema, Collections.ProjectsFiles>,
  >(
    key: string | number,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ProjectsFiles,
        Query["fields"]
      >
    | undefined
  > {
    return await this.client.request(readProjectsFilesItem(key, query));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.ProjectsFiles>,
  >(
    key: string | number,
    patch: Partial<Collections.ProjectsFiles>,
    query?: Query,
  ): Promise<
    | DirectusSDK.ApplyQueryFields<
        Schema,
        Collections.ProjectsFiles,
        Query["fields"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateProjectsFilesItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.ProjectsFiles>,
  >(key: string | number): Promise<void> {
    return await this.client.request(deleteProjectsFilesItem(key));
  }
}

/**
 * The Directus Client.
 */

export type DirectusRestCommands<T extends Record<any, any>> = keyof {
  [K in keyof T as T[K] extends (
    ...any: any[]
  ) => Directus.RestCommand<any, any>
    ? K
    : never]: K;
};

export type TypedClient = {
  /**
   * Manages multiple items from the Events collection.
   */
  events: TypedCollectionItemsWrapper<Collections.Events>;

  /**
   * Manages individual items from the Events collection.
   */
  event: TypedCollectionItemWrapper<Collections.Events>;

  /**
   * Manages multiple items from the EventsDirectusUsers collection.
   */
  events_directus_users: TypedCollectionItemsWrapper<Collections.EventsDirectusUsers>;

  /**
   * Manages individual items from the EventsDirectusUsers collection.
   */
  events_directus_user: TypedCollectionItemWrapper<Collections.EventsDirectusUsers>;

  /**
   * Fetches the only Global instance available.
   */
  ["global"]<const Query extends Directus.Query<Schema, Collections.Global>>(
    query?: Query,
  ): Promise<
    DirectusSDK.ApplyQueryFields<Schema, Collections.Global, Query["fields"]>
  >;

  /**
   * Manages multiple items from the Projects collection.
   */
  projects: TypedCollectionItemsWrapper<Collections.Projects>;

  /**
   * Manages individual items from the Projects collection.
   */
  project: TypedCollectionItemWrapper<Collections.Projects>;

  /**
   * Manages multiple items from the ProjectsFiles collection.
   */
  projects_files: TypedCollectionItemsWrapper<Collections.ProjectsFiles>;

  /**
   * Manages individual items from the ProjectsFiles collection.
   */
  projects_file: TypedCollectionItemWrapper<Collections.ProjectsFiles>;
} & DirectusCommands;

type ExcludedDirectusCommands = "withOptions" | "withToken" | "withSearch";

/**
 * This is almost a sanity check for protecting against breaking changes in the SDK.
 * If this is erroring for you, the SDK probably changed and there's an update needed.
 */

const excludedDirectusCommands: {
  [K in keyof Omit<
    DirectusSDK,
    Exclude<keyof DirectusCommands, ExcludedDirectusCommands>
  >]: true;
} = {
  ["auth"]: true,
  ["authentication"]: true,
  ["createDirectus"]: true,
  ["rest"]: true,
  ["formatFields"]: true,
  ["generateUid"]: true,
  ["getAuthEndpoint"]: true,
  ["graphql"]: true,
  ["memoryStorage"]: true,
  ["messageCallback"]: true,
  ["pong"]: true,
  ["queryToParams"]: true,
  ["realtime"]: true,
  ["sleep"]: true,
  ["staticToken"]: true,
  ["throwIfCoreCollection"]: true,
  ["throwIfEmpty"]: true,
  ["withOptions"]: true,
  ["withToken"]: true,
  ["withSearch"]: true,
} as const;

type _InjectSchemaSystemTypes<T, Schema> =
  T extends Directus.Query<any, infer C>
    ? Directus.Query<Schema, C>
    : T extends Directus.DirectusActivity<any>
      ? Directus.DirectusActivity<Schema>
      : T extends Directus.DirectusCollection<any>
        ? Directus.DirectusCollection<Schema>
        : T extends Directus.DirectusComment<any>
          ? Directus.DirectusComment<Schema>
          : T extends Directus.DirectusField<any>
            ? Directus.DirectusField<Schema>
            : T extends Directus.DirectusFile<any>
              ? Directus.DirectusFile<Schema>
              : T extends Directus.DirectusFolder<any>
                ? Directus.DirectusFolder<Schema>
                : T extends Directus.DirectusPermission<any>
                  ? Directus.DirectusPermission<Schema>
                  : T extends Directus.DirectusPreset<any>
                    ? Directus.DirectusPreset<Schema>
                    : T extends Directus.DirectusRelation<any>
                      ? Directus.DirectusRelation<Schema>
                      : T extends Directus.DirectusRevision<any>
                        ? Directus.DirectusRevision<Schema>
                        : T extends Directus.DirectusRole<any>
                          ? Directus.DirectusRole<Schema>
                          : T extends Directus.DirectusSettings<any>
                            ? Directus.DirectusSettings<Schema>
                            : T extends Directus.DirectusUser<any>
                              ? Directus.DirectusUser<Schema>
                              : T extends Directus.DirectusWebhook<any>
                                ? Directus.DirectusWebhook<Schema>
                                : T extends Directus.DirectusDashboard<any>
                                  ? Directus.DirectusDashboard<Schema>
                                  : T extends Directus.DirectusPanel<any>
                                    ? Directus.DirectusPanel<Schema>
                                    : T extends Directus.DirectusNotification<any>
                                      ? Directus.DirectusNotification<Schema>
                                      : T extends Directus.DirectusShare<any>
                                        ? Directus.DirectusShare<Schema>
                                        : T extends Directus.DirectusFlow<any>
                                          ? Directus.DirectusFlow<Schema>
                                          : T extends Directus.DirectusOperation<any>
                                            ? Directus.DirectusOperation<Schema>
                                            : T extends Directus.DirectusTranslation<any>
                                              ? Directus.DirectusTranslation<Schema>
                                              : T extends Directus.DirectusVersion<any>
                                                ? Directus.DirectusVersion<Schema>
                                                : T extends Directus.DirectusExtension<any>
                                                  ? Directus.DirectusExtension<Schema>
                                                  : T extends Directus.DirectusUser<any>
                                                    ? Directus.DirectusUser<Schema>
                                                    : T;

type InjectSchemaSystemTypes<T, Schema> =
  T extends Partial<infer Nested>
    ? Partial<_InjectSchemaSystemTypes<Nested, Schema>>
    : _InjectSchemaSystemTypes<T, Schema>;

type InjectSchema<T, Schema> = T extends []
  ? []
  : T extends [infer Param]
    ? [InjectSchema<Param, Schema>]
    : T extends [infer Param, ...infer Rest]
      ? [InjectSchema<Param, Schema>, ...InjectSchema<Rest, Schema>]
      : InjectSchemaSystemTypes<T, Schema>;

export type DirectusCommands = {
  [K in DirectusRestCommands<DirectusSDK>]: (
    ...args: InjectSchema<Parameters<DirectusSDK[K]>, Schema>
  ) => Promise<
    ReturnType<DirectusSDK[K]> extends Directus.RestCommand<infer Output, any>
      ? Output
      : unknown
  >;
};

function isDirectusRestCommand(
  pair: [any, any],
): pair is [string, (...args: any[]) => Directus.RestCommand<any, any>] {
  return (
    !((pair?.[0] as any) in excludedDirectusCommands) &&
    typeof pair?.[1] === "function"
  );
}

function isDirectusRestClient<Schema>(
  client: DirectusSDK.DirectusClient<Schema>,
): client is DirectusSDK.DirectusClient<Schema> &
  DirectusSDK.RestClient<Schema> {
  return client && "request" in client;
}

export const schema = () => {
  return <Schema,>(client: Directus.DirectusClient<Schema>): TypedClient => {
    if (!isDirectusRestClient(client)) {
      throw new Error("Directus client must have the REST plugin enabled.");
    }

    return Object.fromEntries([
      ...Object.entries(DirectusSDK)
        .filter(isDirectusRestCommand)
        .map(([key, value]) => {
          return [
            key,
            (...args: any[]): any => {
              return client.request(value(...args));
            },
          ];
        }),

      ["events", new EventsItems(client as any)],
      ["event", new EventsItem(client as any)],

      ["events_directus_users", new EventsDirectusUsersItems(client as any)],
      ["events_directus_user", new EventsDirectusUsersItem(client as any)],

      [
        "global",
        (query: any) => {
          return client.request(readGlobal(query));
        },
      ],

      ["projects", new ProjectsItems(client as any)],
      ["project", new ProjectsItem(client as any)],

      ["projects_files", new ProjectsFilesItems(client as any)],
      ["projects_file", new ProjectsFilesItem(client as any)],
    ]);
  };
};

export interface BindableClient {
  with: <
    Client extends DirectusSDK.DirectusClient<any>,
    Extension extends object,
  >(
    createExtension: (client: Client) => Extension,
  ) => this & Extension;
}

export const bindings = () => {
  return <Schema, Client extends DirectusSDK.DirectusClient<Schema>>(
    client: Client,
  ): BindableClient => {
    return {
      with(createExtension: any) {
        const extension = createExtension(this);
        const extensions = Object.entries(
          extension,
        ).reduce<PropertyDescriptorMap>((properties, [name, value]) => {
          return {
            ...properties,
            [name]: {
              value,
              configurable: true,
              writable: true,
              enumerable: true,
            },
          };
        }, {});

        Object.defineProperties(this, extensions);

        return this;
      },
    } as any;
  };
};

export function createDirectusWithTypes(
  url: string,
): Directus.DirectusClient<Schema> & Directus.RestClient<Schema> & TypedClient {
  return DirectusSDK.createDirectus<Schema>(url)
    .with(bindings())
    .with(DirectusSDK.rest())
    .with(schema());
}

export const createTypedClient = createDirectusWithTypes;
